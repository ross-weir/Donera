/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as FundContractJson } from "../Fund.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace FundTypes {
  export type Fields = {
    selfMetadataUrl: HexString;
    selfBeneficiary: Address;
    selfOrganizer: Address;
    selfGoal: bigint;
    selfDeadline: bigint;
    selfOwner: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getSelfMetadataUrl: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getGoal: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBeneficiary: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getOrganizer: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<FundInstance, FundTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as FundTypes.Fields;
  }

  consts = {
    OwnedError: { Forbidden: BigInt(90) },
    FundError: { FundInProgress: BigInt(50) },
  };

  at(address: string): FundInstance {
    return new FundInstance(address);
  }

  tests = {
    donate: async (
      params: TestContractParamsWithoutMaps<
        FundTypes.Fields,
        { donor: Address; tokenId: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "donate", params);
    },
    finalize: async (
      params: Omit<
        TestContractParamsWithoutMaps<FundTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "finalize", params);
    },
    assertOwner: async (
      params: TestContractParamsWithoutMaps<
        FundTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "assertOwner", params);
    },
    setOwner: async (
      params: TestContractParamsWithoutMaps<
        FundTypes.Fields,
        { newOwner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setOwner", params);
    },
    getSelfMetadataUrl: async (
      params: Omit<
        TestContractParamsWithoutMaps<FundTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getSelfMetadataUrl", params);
    },
    getGoal: async (
      params: Omit<
        TestContractParamsWithoutMaps<FundTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getGoal", params);
    },
    getBeneficiary: async (
      params: Omit<
        TestContractParamsWithoutMaps<FundTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getBeneficiary", params);
    },
    getOrganizer: async (
      params: Omit<
        TestContractParamsWithoutMaps<FundTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getOrganizer", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Fund = new Factory(
  Contract.fromJson(
    FundContractJson,
    "",
    "332f5b4e9cb525d039cb5b9126f6ec6d1d6e332ef4dff4c2c8cb22c5b0c08107"
  )
);

// Use this class to interact with the blockchain
export class FundInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FundTypes.State> {
    return fetchContractState(Fund, this);
  }

  methods = {
    getSelfMetadataUrl: async (
      params?: FundTypes.CallMethodParams<"getSelfMetadataUrl">
    ): Promise<FundTypes.CallMethodResult<"getSelfMetadataUrl">> => {
      return callMethod(
        Fund,
        this,
        "getSelfMetadataUrl",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getGoal: async (
      params?: FundTypes.CallMethodParams<"getGoal">
    ): Promise<FundTypes.CallMethodResult<"getGoal">> => {
      return callMethod(
        Fund,
        this,
        "getGoal",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBeneficiary: async (
      params?: FundTypes.CallMethodParams<"getBeneficiary">
    ): Promise<FundTypes.CallMethodResult<"getBeneficiary">> => {
      return callMethod(
        Fund,
        this,
        "getBeneficiary",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOrganizer: async (
      params?: FundTypes.CallMethodParams<"getOrganizer">
    ): Promise<FundTypes.CallMethodResult<"getOrganizer">> => {
      return callMethod(
        Fund,
        this,
        "getOrganizer",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends FundTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FundTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Fund,
      this,
      calls,
      getContractByCodeHash
    )) as FundTypes.MultiCallResults<Calls>;
  }
}
