/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as DoneraContractJson } from "../Donera.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace DoneraTypes {
  export type Fields = {
    selfFundTemplateId: HexString;
    selfListingFee: bigint;
    selfDonationFee: bigint;
    selfDeadlineLimit: bigint;
    selfOwner: Address;
  };

  export type State = ContractState<Fields>;

  export type FundListedEvent = ContractEvent<{
    name: HexString;
    description: HexString;
    beneficiary: Address;
    organizer: Address;
    goal: bigint;
    deadlineTimestamp: bigint;
    fundContractId: HexString;
  }>;
  export type DonationEvent = ContractEvent<{
    tokenId: HexString;
    amount: bigint;
    donor: Address;
    fundContractId: HexString;
  }>;
  export type FundFinalizedEvent = ContractEvent<{
    finalizer: Address;
    fundContractId: HexString;
  }>;

  export interface CallMethodTable {
    getListingFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getDonationFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<DoneraInstance, DoneraTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as DoneraTypes.Fields;
  }

  eventIndex = { FundListed: 0, Donation: 1, FundFinalized: 2 };
  consts = {
    DoneraError: { InvalidDeadline: BigInt(0) },
    OwnedError: { Forbidden: BigInt(90) },
  };

  at(address: string): DoneraInstance {
    return new DoneraInstance(address);
  }

  tests = {
    createFund: async (
      params: TestContractParams<
        DoneraTypes.Fields,
        {
          name: HexString;
          description: HexString;
          beneficiary: Address;
          goal: bigint;
          deadlineTimestamp: bigint;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createFund", params);
    },
    donateToFund: async (
      params: TestContractParams<
        DoneraTypes.Fields,
        { fundContractId: HexString; tokenId: HexString; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "donateToFund", params);
    },
    finalizeFund: async (
      params: TestContractParams<
        DoneraTypes.Fields,
        { fundContractId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "finalizeFund", params);
    },
    upgrade: async (
      params: TestContractParams<DoneraTypes.Fields, { newCode: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "upgrade", params);
    },
    upgradeWithFields: async (
      params: TestContractParams<
        DoneraTypes.Fields,
        {
          newCode: HexString;
          newImmFieldsEncoded: HexString;
          newMutFieldsEncoded: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "upgradeWithFields", params);
    },
    assertOwner: async (
      params: TestContractParams<DoneraTypes.Fields, { caller: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "assertOwner", params);
    },
    setOwner: async (
      params: TestContractParams<DoneraTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setOwner", params);
    },
    deriveFundPath: async (
      params: TestContractParams<
        DoneraTypes.Fields,
        {
          name: HexString;
          beneficiary: Address;
          organizer: Address;
          goal: bigint;
          deadlineTimestamp: bigint;
        }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "deriveFundPath", params);
    },
    withdraw: async (
      params: TestContractParams<DoneraTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    setSelfFundTemplateId: async (
      params: TestContractParams<
        DoneraTypes.Fields,
        { newFundTemplateId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setSelfFundTemplateId", params);
    },
    getListingFee: async (
      params: Omit<TestContractParams<DoneraTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getListingFee", params);
    },
    setListingFee: async (
      params: TestContractParams<DoneraTypes.Fields, { newListingFee: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setListingFee", params);
    },
    getDonationFee: async (
      params: Omit<TestContractParams<DoneraTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDonationFee", params);
    },
    setDonationFee: async (
      params: TestContractParams<DoneraTypes.Fields, { newDonationFee: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setDonationFee", params);
    },
    setSelfDeadlineLimit: async (
      params: TestContractParams<
        DoneraTypes.Fields,
        { newDeadlineLimit: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setSelfDeadlineLimit", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Donera = new Factory(
  Contract.fromJson(
    DoneraContractJson,
    "=5+14c41e8426=1+42=1-1+c427c429242a442f34301=1+3=1-1+e=1+317=1+324432d433a4347010105=2-1+00=2+3=1-1+160016021603160=1+7e=1-2+5=2+2=1-1+637265617465=1+6756e643a207b0a202020202020737=1-1+6=1+6e3a20656e7=1-1+72792c=2-2+2020202020206e6=1-2+6d653a20=1+52c0a2020202020206=1+6=1-1+6e65666963696=1+7=1+793a200=1-1+2c0a202020202020676f6=1+6c=1+a201=1+2c0a2020202020206=1+656=1+6=1+6c696e655=1-2+696d6=1-1+737=1+6=1-2+6d7=1-1+3a2=1-1=1-1+6=2+2=1+2=1-1+2=1-1=1+07d=65+67e02402e63726561746546756e643a207b7370616e3a20737562436f6e7472616374506174682c2070617468486173683a20017d160=91+16097e02402863726561746546756e643a207b7370616e3a2066756e64437265617465642c2066756e6449643a20017d=43-1+c1600160116027e044039646f6e617465546f46756e643a207b0a2020202020207370616e3a20656e7472792c0a20202020202066756e64436f6e747261637449643a20112c0a202020202020746f6b656e49643a20102c0a202020202020616d6f756e743a20060a202020207d=93-1+f=14+160016017e03403c66696e616c697a6546756e643a207b0a2020202020207370616e3a2066696e616c697a652c0a20202020202066756e64436f6e747261637449643a20132c0a20202020202066696e616c697a65723a20060a202020207d=171-1+d=30+16057e02402e64657269766546756e64506174683a207b7370616e3a20656e636f64696e672c2070617468456e636f6465643a20017d=176",
    "2ce6974a5349de7e0b366a172878cc62e22fbe93493a811451cb7139fe43dedd"
  )
);

// Use this class to interact with the blockchain
export class DoneraInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DoneraTypes.State> {
    return fetchContractState(Donera, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeFundListedEvent(
    options: EventSubscribeOptions<DoneraTypes.FundListedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Donera.contract,
      this,
      options,
      "FundListed",
      fromCount
    );
  }

  subscribeDonationEvent(
    options: EventSubscribeOptions<DoneraTypes.DonationEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Donera.contract,
      this,
      options,
      "Donation",
      fromCount
    );
  }

  subscribeFundFinalizedEvent(
    options: EventSubscribeOptions<DoneraTypes.FundFinalizedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Donera.contract,
      this,
      options,
      "FundFinalized",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | DoneraTypes.FundListedEvent
      | DoneraTypes.DonationEvent
      | DoneraTypes.FundFinalizedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Donera.contract, this, options, fromCount);
  }

  methods = {
    getListingFee: async (
      params?: DoneraTypes.CallMethodParams<"getListingFee">
    ): Promise<DoneraTypes.CallMethodResult<"getListingFee">> => {
      return callMethod(
        Donera,
        this,
        "getListingFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDonationFee: async (
      params?: DoneraTypes.CallMethodParams<"getDonationFee">
    ): Promise<DoneraTypes.CallMethodResult<"getDonationFee">> => {
      return callMethod(
        Donera,
        this,
        "getDonationFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends DoneraTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DoneraTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Donera,
      this,
      calls,
      getContractByCodeHash
    )) as DoneraTypes.MultiCallResults<Calls>;
  }
}
