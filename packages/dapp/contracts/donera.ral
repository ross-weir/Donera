Contract Donera(
  mut selfFundTemplateId: ByteVec,
  mut selfListingFee: U256, 
  mut selfDonationFee: U256,
  mut selfDeadlineLimit: U256,
  mut selfOwner: Address
) extends Upgradeable(selfOwner) implements IDonera {
  // Donera error codes in the range of 0 - 10
  enum DoneraError {
    // Deadline was more than selfDeadlineLimit away
    InvalidDeadline = 0
  }

  @using(preapprovedAssets = true, checkExternalCaller = false, assetsInContract = true)
  pub fn createFund(
    name: ByteVec,
    description: ByteVec,
    beneficiary: Address,
    goal: U256,
    deadlineTimestamp: U256
  ) -> () {
    emit Debug(`createFund: {
      span: entry,
      name: ${name},
      beneficiary: ${beneficiary},
      goal: ${goal},
      deadlineTimestamp: ${deadlineTimestamp}
    }`)
    assert!(deadlineTimestamp <= blockTimeStamp!() + selfDeadlineLimit, DoneraError.InvalidDeadline)

    let organizer = callerAddress!()

    transferTokenToSelf!(organizer, ALPH, selfListingFee)

    let pathHash = deriveFundPath(
      name,
      beneficiary,
      organizer,
      goal,
      deadlineTimestamp
    )

    emit Debug(`createFund: {span: subContractPath, pathHash: ${pathHash}}`)

    let (immFields, mutFields) = Fund.encodeFields!(
      name,
      description,
      beneficiary,
      organizer,
      goal,
      deadlineTimestamp,
      selfAddress!()
    )
    let fundContractId = copyCreateSubContract!{organizer -> ALPH: 1 alph}(
      pathHash,
      selfFundTemplateId,
      immFields,
      mutFields
    )

    emit Debug(`createFund: {span: fundCreated, fundId: ${fundContractId}}`)

    emit FundListed(
      name,
      description,
      beneficiary,
      organizer,
      goal,
      deadlineTimestamp,
      fundContractId
    )
  }

  // Donate tokens to the supplied fund.
  // If making an ALPH token donation the amount should be in atto format.
  @using(preapprovedAssets = true, checkExternalCaller = false, assetsInContract = true)
  pub fn donateToFund(fundContractId: ByteVec, tokenId: ByteVec, amount: U256) -> () {
    emit Debug(`donateToFund: {
      span: entry,
      fundContractId: ${fundContractId},
      tokenId: ${tokenId},
      amount: ${amount}
    }`)

    let fund = IFund(fundContractId)
    let donor = callerAddress!()

    transferTokenToSelf!(donor, ALPH, selfDonationFee)

    fund.donate{donor -> tokenId: amount}(donor, tokenId, amount)

    emit Donation(tokenId, amount, donor, fundContractId)
  }

  @using(checkExternalCaller = false)
  pub fn finalizeFund(fundContractId: ByteVec) -> () {
    let finalizer = callerAddress!()
    let fund = IFund(fundContractId)

    fund.finalize()

    emit FundFinalized(finalizer, fundContractId)
  }

  fn deriveFundPath(
    name: ByteVec,
    beneficiary: Address,
    organizer: Address,
    goal: U256,
    deadlineTimestamp: U256
  ) -> (ByteVec) {
    let pathEncoded = encodeToByteVec!(
      name,
      beneficiary,
      organizer,
      goal,
      deadlineTimestamp
    )
    emit Debug(`deriveFundPath: {span: encoding, pathEncoded: ${pathEncoded}}`)

    return blake2b!(pathEncoded)
  }

  // Withdraw collected protocol fees from the contract.
  //
  // @throws {OwnedError.Forbidden} Caller must be the admin.
  //
  // @param amount The amount of ALPH to withdraw from the contract.
  // @returns unit
  @using(assetsInContract = true)
  pub fn withdraw(amount: U256) -> () {
    assertOwner(callerAddress!())
    transferTokenFromSelf!(selfOwner, ALPH, amount)
  }

  // Update the fund contract template id.
  //
  // @throws {OwnedError.Forbidden} Caller must be the admin.
  //
  // @param newFundTemplateId The new template id.
  // @returns unit
  @using(updateFields = true)
  pub fn setSelfFundTemplateId(newFundTemplateId: ByteVec) -> () {
    assertOwner(callerAddress!())
    selfFundTemplateId = newFundTemplateId
  }

  // Get the current fund listing fee in atto ALPH format.
  pub fn getListingFee() -> U256 {
    return selfListingFee
  }

  // Update the listing fee for new funds.
  //
  // @throws {OwnedError.Forbidden} Caller must be the admin.
  //
  // @param newListingFee The new cost of listing a fund in ALPH atto format.
  // @returns unit
  @using(updateFields = true)
  pub fn setListingFee(newListingFee: U256) -> () {
    assertOwner(callerAddress!())
    selfListingFee = newListingFee
  }

  pub fn getDonationFee() -> U256 {
    return selfDonationFee
  }

  // Update the fee charged when donating to funds.
  //
  // @throws {OwnedError.Forbidden} Caller must be the admin.
  //
  // @param newDonationFee The new cost of donating to a fund in ALPH atto format.
  // @returns unit
  @using(updateFields = true)
  pub fn setDonationFee(newDonationFee: U256) -> () {
    assertOwner(callerAddress!())
    selfDonationFee = newDonationFee
  }

  // Update the deadline limit for new funds.
  //
  // @throws {OwnedError.Forbidden} Caller must be the admin.
  //
  // @param newDeadlineLimit The new limit on fund deadlines.
  // @returns unit
  @using(updateFields = true)
  pub fn setSelfDeadlineLimit(newDeadlineLimit: U256) -> () {
    assertOwner(callerAddress!())
    selfDeadlineLimit = newDeadlineLimit
  }
}
